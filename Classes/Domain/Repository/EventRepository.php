<?php

namespace Zwo3\Calendar\Domain\Repository;

/***
 * This file is part of the "calendar" Extension for TYPO3 CMS.
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *  (c) 2018 Gregor Agnes <ga@zwo3.de>, zwo3
 ***/

use Carbon\Carbon;
use Doctrine\Common\Persistence\ObjectManager;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Database\Query\QueryBuilder;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings;
use TYPO3\CMS\Extbase\Persistence\QueryInterface;
use TYPO3\CMS\Extbase\Utility\DebuggerUtility;

/**
 * The repository for Events
 */
class EventRepository extends \TYPO3\CMS\Extbase\Persistence\Repository
{

    /**
     * @var array
     */
    protected $defaultOrderings = [
        'sorting' => \TYPO3\CMS\Extbase\Persistence\QueryInterface::ORDER_ASCENDING
    ];

    public function initializeObject()
    {
        // Einstellungen laden
        /** @var Typo3QuerySettings $querySettings */
        $querySettings = $this->objectManager->get('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings');

        // Einstellungen bearbeiten
        #$querySettings->setSomething();

        $querySettings->setRespectStoragePage(false);

        // Einstellungen als Default setzen
        # $this->setDefaultQuerySettings($querySettings);
    }

    /**
     * @return array|\TYPO3\CMS\Extbase\Persistence\QueryResultInterface
     */
    public function findAll($withRecurrence = true, $maxResults = 20)
    {

        /** @var QueryBuilder $queryBuilder */
        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('tx_cal_event');

        $queryBuilder->select(...[
            'tx_cal_event.uid',
            'title',
            'description',
            'freq',
            'until',
            'cnt',
            'byday',
            'bymonthday',
            'bymonth',
            'intrval',
            'rdate',
            'rdate_type',
            'start',
            'stop'
        ])
            ->from('tx_cal_event')
            ->where(
                ('start_date > ' . Carbon::now()->format('Ymd'))
            );
            if ($withRecurrence) {
                $queryBuilder->rightJoin(
                    'tx_cal_event',
                    'tx_cal_index',
                    'index',
                    $queryBuilder->expr()->eq('index.event_uid', $queryBuilder->quoteIdentifier('tx_cal_event.uid'))
                );
            }
            if ($maxResults) {
                $queryBuilder->setMaxResults($maxResults);
            }
        $eventsArray = $queryBuilder->execute()->fetchAll();

        // Array values mappen -> Event
        foreach ($eventsArray as $event) {
            $events[] = $this->objectManager->get('TYPO3\CMS\Extbase\Property\PropertyMapper')
                ->convert(
                    $event,
                    'Zwo3\Calendar\Domain\Model\Event'
                );
        }
        return $events;

        #DebuggerUtility::var_dump($events);

        return parent::findAll(); // TODO: Change the autogenerated stub
    }

}
